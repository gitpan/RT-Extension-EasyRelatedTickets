%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%#  
%# This software is Copyright (c) 1996-2007 Best Practical Solutions, LLC 
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/copyleft/gpl.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<table>
  <tr>
    <td class="labeltop"><&|/l&>Depends on</&>: (<a href="<%$clone->{'new-DependsOn'}%>">Create</a>)
</td>
    <td class="value">
<ul>
% while (my $Link = $Ticket->DependsOn->Next) {
<li><& ShowLink, URI => $Link->TargetURI &>
% }
</ul>
    </td>
  </tr>
  <tr>
    <td class="labeltop"><&|/l&>Depended on by</&>: (<a href="<%$clone->{'DependsOn-new'}%>">Create</a>)</td>
    <td class="value">
<ul>
% while (my $Link = $Ticket->DependedOnBy->Next) {
<li><& ShowLink, URI => $Link->BaseURI &>
% }
</ul>
    </td>
  </tr>
  <tr>
    <td class="labeltop"><&|/l&>Parents</&>: (<a href="<%$clone->{'new-MemberOf'}%>">Create</a>)</td>

    <td class="value">
<ul>
% while (my $Link = $Ticket->MemberOf->Next) {
<li><& ShowLink, URI => $Link->TargetURI &>
% }
</ul>
    </td>
  </tr>
  <tr>
    <td class="labeltop"><&|/l&>Children</&>: (<a href="<%$clone->{'MemberOf-new'}%>">Create</a>)</td>
    <td class="value"><& /Ticket/Elements/ShowMembers, Ticket => $Ticket &></td>
  </tr>
  <tr>
    <td class="labeltop"><&|/l&>Refers to</&>: (<a href="<%$clone->{'new-RefersTo'}%>">Create</a>)</td>
    <td class="value">
<ul>
% while (my $Link = $Ticket->RefersTo->Next) {
<li><& ShowLink, URI => $Link->TargetURI &>
% }
</ul>
    </td>
  </tr>
  <tr>
    <td class="labeltop"><&|/l&>Referred to by</&>: (<a href="<%$clone->{'RefersTo-new'}%>">Create</a>)</td>
    <td class="value">
    <ul>
% while (my $Link = $Ticket->ReferredToBy->Next) {
% next if (UNIVERSAL::isa($Link->BaseObj, 'RT::Ticket')  && $Link->BaseObj->Type eq 'reminder');
<li><& ShowLink, URI => $Link->BaseURI &>
% }
</ul>
    </td>
  </tr>

% # Allow people to add more rows to the table                                                                                                                           
%  $m->comp('/Elements/Callback', %ARGS );

</table>

<%INIT>
        my $clone;
        my $path = '/Ticket/Create.html?Queue='.$Ticket->Queue .  '&CloneTicket=' . $Ticket->id;
        my $members = $Ticket->Members;
        my ( @members, @members_of, @refers, @refers_by, @depends, @depends_by );
        while ( my $member = $members->Next ) {
            push @members, $member->LocalBase;
        }
        $clone->{'MemberOf-new'} = $path . '&MemberOf-new=' . join '%20', @members, $Ticket->id;
    
        my $members_of = $Ticket->MemberOf;
        while ( my $member_of = $members_of->Next ) {
            push @members_of, $member_of->LocalTarget;
        }
        $clone->{'new-MemberOf'} = $path . '&new-MemberOf=' . join '%20', @members_of, $Ticket->id;
        
        my $refers = $Ticket->RefersTo;
        while ( my $refer = $refers->Next ) {
            push @refers, $refer->LocalTarget;
        }
        $clone->{'new-RefersTo'} = $path . '&new-RefersTo=' . join '%20', @refers, $Ticket->id;
    
        my $refers_by = $Ticket->ReferredToBy;
        while ( my $refer_by = $refers_by->Next ) {
            push @refers_by, $refer_by->LocalBase;
        }
        $clone->{'RefersTo-new'} = $path . '&RefersTo-new=' . join '%20', @refers_by, $Ticket->id;
    
        my $depends = $Ticket->DependsOn;
        while ( my $depend = $depends->Next ) {
            push @depends, $depend->LocalTarget;
        }
        $clone->{'new-DependsOn'} = $path . '&new-DependsOn=' . join '%20', @depends, $Ticket->id;
    
        my $depends_by = $Ticket->DependedOnBy;
        while ( my $depend_by = $depends_by->Next ) {
            push @depends_by, $depend_by->LocalBase;
        }
        $clone->{'DependsOn-new'} = $path . '&DependsOn-new=' . join '%20', @depends_by, $Ticket->id;

</%INIT>

<%ARGS>
$Ticket => undef
</%ARGS>
